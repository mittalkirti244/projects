const MessagingService = require('./service.js')
const queued = require('./common-utils/queued')

class ExternalMessagingService extends MessagingService {
  init() {
    // stores also event information
    this.subscribedTopics = new Map()
    this.alternativeTopics = new Map()
    // enables queued async operations (without awaiting)
    this.queued = queued()
    return super.init()
  }

  normalizeOn(topicOrEvent) {
    const inbound = true
    let topics
    let event
    const _topic = this.topic4(topicOrEvent, inbound)
    if (_topic) {
      // must have been event
      if (_topic.startsWith('topic:')) {
        topics = [_topic.replace(/^topic:/, '')]
      } else {
        topics = this.inboundTopics(this.normalizeTopic(_topic, inbound), this.options)
      }
      event = topicOrEvent
    } else {
      // must have been topic
      if (topicOrEvent.startsWith('topic:')) {
        event = topicOrEvent.replace(/^topic:/, '')
        topics = [event]
      } else {
        event = topicOrEvent
        topics = this.inboundTopics(this.normalizeTopic(topicOrEvent, inbound), this.options)
      }
      const _event = this.event4(topicOrEvent, inbound)
      if (_event) event = _event
    }
    return { topics, event }
  }

  // inbound -> listen to channel (once)
  on(topicOrEvent, handler) {
    const { topics, event } = this.normalizeOn(topicOrEvent)
    topics.forEach(topic => {
      if (typeof topic === 'object' && topic.topic) {
        this.subscribedTopics.set(topic.topic, event)
        this.alternativeTopics.set(topic.topic, topic.alternative)
      } else {
        this.subscribedTopics.set(topic, event)
      }
    })
    super.on(event, handler)
  }

  adjustOutboundMsg(msg, declared) {
    if ((!declared && !msg.event.startsWith('topic')) || (declared && !declared['@topic']))
      msg.event = this.normalizeTopic(this.outboundTopic(msg.event) || msg.event)
    if (declared && declared['@topic']) msg.event = declared['@topic']
    if (msg.event.startsWith('topic:')) msg.event = msg.event.replace(/^topic:/, '')
  }

  normalizeTopic(topic) {
    return topic
  }

  inboundTopics(topic, options) {
    return [topic]
  }

  outboundTopic(topic) {
    return this.topic4(topic, false) || topic
  }
}

module.exports = ExternalMessagingService
