const { isNavigationToMany } = require('../utils/req')
const { isDraftActivateAction } = require('../utils/handler')
const {
  addDraftDataFromExistingDraft,
  addGeneratedDraftUUID
} = require('../../cds-services/services/utils/handlerUtils')

/**
 * Generic Handler for before NEW requests.
 *
 * @param req
 */
const _new = async function (req) {
  if (isDraftActivateAction(req)) return

  if (isNavigationToMany(req)) {
    const result = await addDraftDataFromExistingDraft(req, this)

    // in order to fix strange case where active subitems are created in draft case
    if (result.length === 0) req.reject(404)
  } else {
    addGeneratedDraftUUID(req)
  }
}

/**
 * Generic Handler for before PATCH and UPDATE requests.
 *
 * @param req
 */
const _patchUpdate = async function (req) {
  if (isDraftActivateAction(req)) return

  const result = await addDraftDataFromExistingDraft(req, this)

  // means that draft not exists
  if (result.length === 0) req.reject(404)
}

/**
 * Generic Handler for before DELETE and CANCEL requests.
 *
 * @param req
 */
const _deleteCancel = async function (req) {
  await addDraftDataFromExistingDraft(req, this)
}

const { ODATA, COMMON } = require('../../common/constants/annotation')
const _relevant = e => e[ODATA.DRAFT] || e[COMMON.DRAFT_NODE.PREP_ACTION]

module.exports = function () {
  _new._initial = true
  _patchUpdate._initial = true
  _deleteCancel._initial = true

  for (const entity of Object.values(this.entities).filter(_relevant)) {
    this.before('NEW', entity, _new)
    this.before(['PATCH', 'UPDATE'], entity, _patchUpdate)
    this.before(['DELETE', 'CANCEL'], entity, _deleteCancel)
  }
}
