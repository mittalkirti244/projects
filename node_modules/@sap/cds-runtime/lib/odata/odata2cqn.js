/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

'use strict'

function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child
  }
  ctor.prototype = parent.prototype
  child.prototype = new ctor()
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message
  this.expected = expected
  this.found = found
  this.location = location
  this.name = 'SyntaxError'

  if (typeof Error.captureStackTrace === 'function') {
    Error.captureStackTrace(this, peg$SyntaxError)
  }
}

peg$subclass(peg$SyntaxError, Error)

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"'
    },

    class: function (expectation) {
      var escapedParts = '',
        i

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts +=
          expectation.parts[i] instanceof Array
            ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
            : classEscape(expectation.parts[i])
      }

      return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
    },

    any: function (expectation) {
      return 'any character'
    },

    end: function (expectation) {
      return 'end of input'
    },

    other: function (expectation) {
      return expectation.description
    }
  }

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase()
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch)
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch)
      })
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g, '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch)
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch)
      })
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
      i,
      j

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i])
    }

    descriptions.sort()

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i]
          j++
        }
      }
      descriptions.length = j
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0]

      case 2:
        return descriptions[0] + ' or ' + descriptions[1]

      default:
        return descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
    }
  }

  function describeFound(found) {
    return found ? '"' + literalEscape(found) + '"' : 'end of input'
  }

  return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
}

function peg$parse(input, options) {
  options = options !== void 0 ? options : {}

  var peg$FAILED = {},
    peg$startRuleFunctions = { ODataRelativeURI: peg$parseODataRelativeURI },
    peg$startRuleFunction = peg$parseODataRelativeURI,
    peg$c0 = '/',
    peg$c1 = peg$literalExpectation('/', false),
    peg$c2 = function (p) {
      SELECT = { from: p }
    },
    peg$c3 = '?',
    peg$c4 = peg$literalExpectation('?', false),
    peg$c5 = '&',
    peg$c6 = peg$literalExpectation('&', false),
    peg$c7 = function () {
      if (SELECT.expand) {
        SELECT.columns = SELECT.expand
        delete SELECT.expand
      }

      SELECT = correctAggAwayColumns(SELECT)
      SELECT = fillSkippedColumns(SELECT)

      return { SELECT }
    },
    peg$c8 = '$count',
    peg$c9 = peg$literalExpectation('$count', false),
    peg$c10 = '$ref',
    peg$c11 = peg$literalExpectation('$ref', false),
    peg$c12 = '$value',
    peg$c13 = peg$literalExpectation('$value', false),
    peg$c14 = function (crv) {
      return { ref: [crv] }
    },
    peg$c15 = function (head, filter, p) {
      return p
    },
    peg$c16 = function (head, filter, tail) {
      const ref = [filter ? { id: head, where: filter[1] } : head]
      if (tail) {
        const more = tail.ref,
          [{ val }] = more
        if (val) ref[ref.length - 1] = { id: ref[ref.length - 1], where: [more.shift()] }
        ref.push(...more)
      }
      return { ref }
    },
    peg$c17 = function (val) {
      return [val]
    },
    peg$c18 = '=',
    peg$c19 = peg$literalExpectation('=', false),
    peg$c20 = function (ref, w) {
      return { val: w }
    },
    peg$c21 = function (ref, val, more) {
      const args = [ref, '=', val]
      if (more) args.push('and', ...more[1])
      return args
    },
    peg$c22 = '$select=',
    peg$c23 = peg$literalExpectation('$select=', false),
    peg$c24 = '$expand=',
    peg$c25 = peg$literalExpectation('$expand=', false),
    peg$c26 = '$filter=',
    peg$c27 = peg$literalExpectation('$filter=', false),
    peg$c28 = '$orderby=',
    peg$c29 = peg$literalExpectation('$orderby=', false),
    peg$c30 = '$top=',
    peg$c31 = peg$literalExpectation('$top=', false),
    peg$c32 = '$skip=',
    peg$c33 = peg$literalExpectation('$skip=', false),
    peg$c34 = '$search=',
    peg$c35 = peg$literalExpectation('$search=', false),
    peg$c36 = '$count=',
    peg$c37 = peg$literalExpectation('$count=', false),
    peg$c38 = '$apply=',
    peg$c39 = peg$literalExpectation('$apply=', false),
    peg$c40 = '*',
    peg$c41 = peg$literalExpectation('*', false),
    peg$c42 = function () {
      return { ref: '*' }
    },
    peg$c43 = function (col) {
      ;(SELECT.expand || (SELECT.expand = [])).push(col)
      return col
    },
    peg$c44 = function (c) {
      c.expand = [{ ref: '*' }]
    },
    peg$c45 = function () {
      stack.push(SELECT)
      SELECT = SELECT.expand[SELECT.expand.length - 1]
      SELECT.expand = [{ ref: '*' }] // by default expand everything
    },
    peg$c46 = ';',
    peg$c47 = peg$literalExpectation(';', false),
    peg$c48 = function (expandOption) {
      // if there is a $select remove the {ref:'*'} which is by default element[0]
      if (expandOption[0] === '$select=') SELECT.expand.shift()
    },
    peg$c49 = function () {
      SELECT = stack.pop()
    },
    peg$c50 = function (val) {
      ;(SELECT.limit || (SELECT.limit = {})).rows = { val }
    },
    peg$c51 = function (val) {
      ;(SELECT.limit || (SELECT.limit = {})).offset = { val }
    },
    peg$c52 = function (p) {
      SELECT.search = p
    },
    peg$c53 = function (n) {
      return n ? [n] : []
    },
    peg$c54 = function (p, xpr) {
      p.push({ xpr })
    },
    peg$c55 = function (p, val) {
      p.push({ val })
    },
    peg$c56 = function (p, ao, more) {
      p.push(ao, ...more)
    },
    peg$c57 = function (p) {
      return p
    },
    peg$c58 = function (p) {
      SELECT.where = p
    },
    peg$c59 = function (p, comp) {
      p.push(...comp)
    },
    peg$c60 = function (p, lambda) {
      p.push(...lambda)
    },
    peg$c61 = function (p, func) {
      p.push(func)
    },
    peg$c62 = function (head, n) {
      return n
    },
    peg$c63 = function (head, nav, any) {
      nav.unshift(head)

      const id = nav.pop()
      return ['exists', { ref: [...nav, { id, where: any }] }]
    },
    peg$c64 = function (head, nav, all) {
      nav.unshift(head)
      const id = nav.pop()
      return ['not', 'exists', { ref: [...nav, { id, where: ['not', { xpr: [...all] }] }] }]
    },
    peg$c65 = function (head, tail) {
      return tail.pop()
    },
    peg$c66 = function (n) {
      return n ? [n] : []
    },
    peg$c67 = function (p, xpr) {
      p.push('(', ...xpr, ')')
    },
    peg$c68 = function (p, comp) {
      p.push(...comp)
    },
    peg$c69 = function (p, ao, more) {
      p.push(ao, ...more)
    },
    peg$c70 = function (p) {
      return p
    },
    peg$c71 = ':',
    peg$c72 = peg$literalExpectation(':', false),
    peg$c73 = function (prefix, inner) {
      for (const e of inner) {
        // remove the prefix identifier
        if (e.ref && e.ref[0] === prefix) e.ref.shift()
      }
      return inner
    },
    peg$c74 = 'any',
    peg$c75 = peg$literalExpectation('any', false),
    peg$c76 = 'all',
    peg$c77 = peg$literalExpectation('all', false),
    peg$c78 = 'asc',
    peg$c79 = peg$literalExpectation('asc', false),
    peg$c80 = 'desc',
    peg$c81 = peg$literalExpectation('desc', false),
    peg$c82 = function (ref, s) {
      return s
    },
    peg$c83 = function (ref, sort) {
      const appendObj = $(ref, sort && { sort })
      SELECT.orderBy = SELECT.orderBy ? [...SELECT.orderBy, appendObj] : [appendObj]
    },
    peg$c84 = 'true',
    peg$c85 = peg$literalExpectation('true', false),
    peg$c86 = 'false',
    peg$c87 = peg$literalExpectation('false', false),
    peg$c88 = function (val) {
      if (val === 'true') {
        SELECT.count = true
      }
    },
    peg$c89 = /^[a-zA-Z]/,
    peg$c90 = peg$classExpectation(
      [
        ['a', 'z'],
        ['A', 'Z']
      ],
      false,
      false
    ),
    peg$c91 = /^[a-zA-Z0-9\-]/,
    peg$c92 = peg$classExpectation([['a', 'z'], ['A', 'Z'], ['0', '9'], '-'], false, false),
    peg$c93 = /^[^&]/,
    peg$c94 = peg$classExpectation(['&'], true, false),
    peg$c95 = peg$otherExpectation('a comparison'),
    peg$c96 = 'eq',
    peg$c97 = peg$literalExpectation('eq', false),
    peg$c98 = 'ne',
    peg$c99 = peg$literalExpectation('ne', false),
    peg$c100 = 'lt',
    peg$c101 = peg$literalExpectation('lt', false),
    peg$c102 = 'gt',
    peg$c103 = peg$literalExpectation('gt', false),
    peg$c104 = 'le',
    peg$c105 = peg$literalExpectation('le', false),
    peg$c106 = 'ge',
    peg$c107 = peg$literalExpectation('ge', false),
    peg$c108 = function (a, o, b) {
      const op = { eq: '=', ne: '!=', lt: '<', gt: '>', le: '<=', ge: '>=' }[o] || o
      return [a, op, b]
    },
    peg$c109 = 'add',
    peg$c110 = peg$literalExpectation('add', false),
    peg$c111 = 'sub',
    peg$c112 = peg$literalExpectation('sub', false),
    peg$c113 = 'mul',
    peg$c114 = peg$literalExpectation('mul', false),
    peg$c115 = 'div',
    peg$c116 = peg$literalExpectation('div', false),
    peg$c117 = 'mod',
    peg$c118 = peg$literalExpectation('mod', false),
    peg$c119 = peg$otherExpectation('an operand'),
    peg$c120 = peg$otherExpectation('a reference'),
    peg$c121 = function (head, n) {
      return n
    },
    peg$c122 = function (head, tail) {
      if (head === 'null') {
        return { val: null }
      } else {
        return { ref: [head, ...tail] }
      }
    },
    peg$c123 = function (val) {
      return { val }
    },
    peg$c124 = function (val) {
      return typeof val === 'number' ? { val } : { val, literal: 'number' }
    },
    peg$c125 = peg$otherExpectation('a function call'),
    peg$c126 = /^[a-z]/,
    peg$c127 = peg$classExpectation([['a', 'z']], false, false),
    peg$c128 = function (func, a, o) {
      return o
    },
    peg$c129 = function (func, a, more) {
      if (!strict || func in strict.functions) return { func, args: [a, ...more] }
      else error("'" + func + "' is an unknown function in OData URL spec (strict mode)")
    },
    peg$c130 = peg$otherExpectation('a boolean function'),
    peg$c131 = 'contains',
    peg$c132 = peg$literalExpectation('contains', false),
    peg$c133 = 'endswith',
    peg$c134 = peg$literalExpectation('endswith', false),
    peg$c135 = 'startswith',
    peg$c136 = peg$literalExpectation('startswith', false),
    peg$c137 = function (func, a, b) {
      return { func, args: [a, b] }
    },
    peg$c138 = 'not',
    peg$c139 = peg$literalExpectation('NOT', true),
    peg$c140 = function () {
      return 'not'
    },
    peg$c141 = 'and',
    peg$c142 = peg$literalExpectation('AND', true),
    peg$c143 = function () {
      return 'and'
    },
    peg$c144 = 'or',
    peg$c145 = peg$literalExpectation('OR', true),
    peg$c146 = function () {
      return 'or'
    },
    peg$c147 = 'aggregate',
    peg$c148 = peg$literalExpectation('aggregate', false),
    peg$c149 = 'groupby',
    peg$c150 = peg$literalExpectation('groupby', false),
    peg$c151 = 'filter',
    peg$c152 = peg$literalExpectation('filter', false),
    peg$c153 = 'expand',
    peg$c154 = peg$literalExpectation('expand', false),
    peg$c155 = 'search',
    peg$c156 = peg$literalExpectation('search', false),
    peg$c157 = 'concat',
    peg$c158 = peg$literalExpectation('concat', false),
    peg$c159 = 'compute',
    peg$c160 = peg$literalExpectation('compute', false),
    peg$c161 = 'bottompercent',
    peg$c162 = peg$literalExpectation('bottompercent', false),
    peg$c163 = 'bottomsum',
    peg$c164 = peg$literalExpectation('bottomsum', false),
    peg$c165 = 'toppercent',
    peg$c166 = peg$literalExpectation('toppercent', false),
    peg$c167 = 'topsum',
    peg$c168 = peg$literalExpectation('topsum', false),
    peg$c169 = function (alias) {
      return { func: 'count', args: ['*'], as: alias }
    },
    peg$c170 = function (res) {
      ;(SELECT.expand || (SELECT.expand = [])).push(res)
    },
    peg$c171 = function (path, func, alias) {
      return { func, args: [path], as: alias }
    },
    peg$c172 = 'with',
    peg$c173 = peg$literalExpectation('with', false),
    peg$c174 = function (func) {
      return func
    },
    peg$c175 = 'from',
    peg$c176 = peg$literalExpectation('from', false),
    peg$c177 = 'as',
    peg$c178 = peg$literalExpectation('as', false),
    peg$c179 = function (alias) {
      return alias
    },
    peg$c180 = function (val) {
      ;(SELECT.groupBy || (SELECT.groupBy = [])).push(val)
    },
    peg$c181 = 'rollup',
    peg$c182 = peg$literalExpectation('rollup', false),
    peg$c183 = '$all',
    peg$c184 = peg$literalExpectation('$all', false),
    peg$c185 = 'topcount',
    peg$c186 = peg$literalExpectation('topcount', false),
    peg$c187 = 'bottomcount',
    peg$c188 = peg$literalExpectation('bottomcount', false),
    peg$c189 = function (trafo, val, ref) {
      const oredrObj = { ...ref, sort: trafo === 'topcount' ? 'desc' : 'asc' }
      SELECT.orderBy = SELECT.orderBy ? [...SELECT.orderBy, oredrObj] : [oredrObj]
      ;(SELECT.limit || (SELECT.limit = {})).rows = { val }
    },
    peg$c190 = 'identity',
    peg$c191 = peg$literalExpectation('identity', false),
    peg$c192 = peg$otherExpectation('Edm.String'),
    peg$c193 = "'",
    peg$c194 = peg$literalExpectation("'", false),
    peg$c195 = "''",
    peg$c196 = peg$literalExpectation("''", false),
    peg$c197 = /^[^']/,
    peg$c198 = peg$classExpectation(["'"], true, false),
    peg$c199 = function (s) {
      return s.replace(/''/g, "'")
    },
    peg$c200 = /^[+"-"a-zA-Z0-9"."]/,
    peg$c201 = peg$classExpectation(['+', ['"', '"'], ['a', 'z'], ['A', 'Z'], ['0', '9'], '"', '.', '"'], false, false),
    peg$c202 = /^[0-9]/,
    peg$c203 = peg$classExpectation([['0', '9']], false, false),
    peg$c204 = '-',
    peg$c205 = peg$literalExpectation('-', false),
    peg$c206 = /^[Z"."0-9T]/,
    peg$c207 = peg$classExpectation(['Z', '"', '.', '"', ['0', '9'], 'T'], false, false),
    peg$c208 = /^[+\-]/,
    peg$c209 = peg$classExpectation(['+', '-'], false, false),
    peg$c210 = '.',
    peg$c211 = peg$literalExpectation('.', false),
    peg$c212 = 'e',
    peg$c213 = peg$literalExpectation('e', false),
    peg$c214 = function (s) {
      return safeNumber(s)
    },
    peg$c215 = function (s) {
      return parseInt(s)
    },
    peg$c216 = /^[_a-zA-Z0-9"."]/,
    peg$c217 = peg$classExpectation(['_', ['a', 'z'], ['A', 'Z'], ['0', '9'], '"', '.', '"'], false, false),
    peg$c218 = /^[0-9a-zA-Z]/,
    peg$c219 = peg$classExpectation(
      [
        ['0', '9'],
        ['a', 'z'],
        ['A', 'Z']
      ],
      false,
      false
    ),
    peg$c220 = function (val) {
      return { val }
    },
    peg$c221 = ',',
    peg$c222 = peg$literalExpectation(',', false),
    peg$c223 = '(',
    peg$c224 = peg$literalExpectation('(', false),
    peg$c225 = ')',
    peg$c226 = peg$literalExpectation(')', false),
    peg$c227 = peg$otherExpectation('optional whitespaces'),
    peg$c228 = /^[ \t\n]/,
    peg$c229 = peg$classExpectation([' ', '\t', '\n'], false, false),
    peg$c230 = peg$otherExpectation('mandatory whitespaces'),
    peg$currPos = 0,
    peg$savedPos = 0,
    peg$posDetailsCache = [{ line: 1, column: 1 }],
    peg$maxFailPos = 0,
    peg$maxFailExpected = [],
    peg$silentFails = 0,
    peg$result

  if ('startRule' in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error('Can\'t start parsing from rule "' + options.startRule + '".')
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos)
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos)
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    )
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location)
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: 'literal', text: text, ignoreCase: ignoreCase }
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
  }

  function peg$anyExpectation() {
    return { type: 'any' }
  }

  function peg$endExpectation() {
    return { type: 'end' }
  }

  function peg$otherExpectation(description) {
    return { type: 'other', description: description }
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
      p

    if (details) {
      return details
    } else {
      p = pos - 1
      while (!peg$posDetailsCache[p]) {
        p--
      }

      details = peg$posDetailsCache[p]
      details = {
        line: details.line,
        column: details.column
      }

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++
          details.column = 1
        } else {
          details.column++
        }

        p++
      }

      peg$posDetailsCache[pos] = details
      return details
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
      endPosDetails = peg$computePosDetails(endPos)

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    }
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos
      peg$maxFailExpected = []
    }

    peg$maxFailExpected.push(expected)
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location)
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location)
  }

  function peg$parseODataRelativeURI() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13

    s0 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c0
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c1)
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parsepath()
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2
        s3 = peg$c2(s3)
      }
      s2 = s3
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos
        s4 = peg$parseo()
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s5 = peg$c3
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c4)
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseo()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpandOption()
              if (s7 !== peg$FAILED) {
                s8 = []
                s9 = peg$currPos
                s10 = peg$parseo()
                if (s10 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 38) {
                    s11 = peg$c5
                    peg$currPos++
                  } else {
                    s11 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c6)
                    }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseo()
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseExpandOption()
                      if (s13 !== peg$FAILED) {
                        s10 = [s10, s11, s12, s13]
                        s9 = s10
                      } else {
                        peg$currPos = s9
                        s9 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s9
                      s9 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s9
                    s9 = peg$FAILED
                  }
                } else {
                  peg$currPos = s9
                  s9 = peg$FAILED
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9)
                  s9 = peg$currPos
                  s10 = peg$parseo()
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 38) {
                      s11 = peg$c5
                      peg$currPos++
                    } else {
                      s11 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c6)
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseo()
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseExpandOption()
                        if (s13 !== peg$FAILED) {
                          s10 = [s10, s11, s12, s13]
                          s9 = s10
                        } else {
                          peg$currPos = s9
                          s9 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s9
                        s9 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s9
                      s9 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s9
                    s9 = peg$FAILED
                  }
                }
                if (s8 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8]
                  s3 = s4
                } else {
                  peg$currPos = s3
                  s3 = peg$FAILED
                }
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        if (s3 === peg$FAILED) {
          s3 = null
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseo()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c7()
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsepath() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$currPos
    if (input.substr(peg$currPos, 6) === peg$c8) {
      s2 = peg$c8
      peg$currPos += 6
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c9)
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c10) {
        s2 = peg$c10
        peg$currPos += 4
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c11)
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c12) {
          s2 = peg$c12
          peg$currPos += 6
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c13)
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c14(s1)
    }
    s0 = s1
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseguid()
      if (s1 === peg$FAILED) {
        s1 = peg$parseidentifier()
        if (s1 === peg$FAILED) {
          s1 = peg$parseval()
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parseOPEN()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseargs()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE()
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5]
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = null
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c0
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c1)
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepath()
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c15(s1, s2, s5)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
          if (s3 === peg$FAILED) {
            s3 = null
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c16(s1, s2, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseargs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8

    s0 = peg$currPos
    s1 = peg$parseguid()
    if (s1 === peg$FAILED) {
      s1 = peg$parseval()
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c17(s1)
    }
    s0 = s1
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseref()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c18
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c19)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseo()
            if (s4 !== peg$FAILED) {
              s5 = peg$parseguid()
              if (s5 === peg$FAILED) {
                s5 = peg$parseval()
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos
                  s6 = peg$parseword()
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s5
                    s6 = peg$c20(s1, s6)
                  }
                  s5 = s6
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos
                s7 = peg$parseCOMMA()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseargs()
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8]
                    s6 = s7
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
                if (s6 === peg$FAILED) {
                  s6 = null
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0
                  s1 = peg$c21(s1, s5, s6)
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseExpandOption() {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    if (input.substr(peg$currPos, 8) === peg$c22) {
      s1 = peg$c22
      peg$currPos += 8
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c23)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseselect()
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          s6 = peg$parseCOMMA()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseselect()
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7]
              s5 = s6
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            s5 = peg$currPos
            s6 = peg$parseCOMMA()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseselect()
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7]
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      if (input.substr(peg$currPos, 8) === peg$c24) {
        s1 = peg$c24
        peg$currPos += 8
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c25)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseo()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpand()
          if (s3 !== peg$FAILED) {
            s4 = []
            s5 = peg$currPos
            s6 = peg$parseCOMMA()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpand()
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7]
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5)
              s5 = peg$currPos
              s6 = peg$parseCOMMA()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpand()
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        if (input.substr(peg$currPos, 8) === peg$c26) {
          s1 = peg$c26
          peg$currPos += 8
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c27)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseo()
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefilter()
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos
          if (input.substr(peg$currPos, 9) === peg$c28) {
            s1 = peg$c28
            peg$currPos += 9
          } else {
            s1 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c29)
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseo()
            if (s2 !== peg$FAILED) {
              s3 = peg$parseorderby()
              if (s3 !== peg$FAILED) {
                s4 = []
                s5 = peg$currPos
                s6 = peg$parseCOMMA()
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseorderby()
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7]
                    s5 = s6
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5)
                  s5 = peg$currPos
                  s6 = peg$parseCOMMA()
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseorderby()
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7]
                      s5 = s6
                    } else {
                      peg$currPos = s5
                      s5 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4]
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.substr(peg$currPos, 5) === peg$c30) {
              s1 = peg$c30
              peg$currPos += 5
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c31)
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseo()
              if (s2 !== peg$FAILED) {
                s3 = peg$parsetop()
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3]
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos
              if (input.substr(peg$currPos, 6) === peg$c32) {
                s1 = peg$c32
                peg$currPos += 6
              } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c33)
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseo()
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseskip()
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3]
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos
                if (input.substr(peg$currPos, 8) === peg$c34) {
                  s1 = peg$c34
                  peg$currPos += 8
                } else {
                  s1 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c35)
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseo()
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsesearch()
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3]
                      s0 = s1
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos
                  if (input.substr(peg$currPos, 7) === peg$c36) {
                    s1 = peg$c36
                    peg$currPos += 7
                  } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c37)
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseo()
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsecount()
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3]
                        s0 = s1
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    if (input.substr(peg$currPos, 7) === peg$c38) {
                      s1 = peg$c38
                      peg$currPos += 7
                    } else {
                      s1 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c39)
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseo()
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseapply()
                        if (s3 !== peg$FAILED) {
                          s1 = [s1, s2, s3]
                          s0 = s1
                        } else {
                          peg$currPos = s0
                          s0 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecustom()
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0
  }

  function peg$parseselect() {
    var s0, s1, s2

    s0 = peg$currPos
    s1 = peg$parseref()
    if (s1 === peg$FAILED) {
      s1 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c40
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c41)
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1
        s2 = peg$c42()
      }
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c43(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseexpand() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$parseselect()
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1
      s2 = peg$c44(s2)
    }
    s1 = s2
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$currPos
      s4 = peg$parseOPEN()
      if (s4 !== peg$FAILED) {
        peg$savedPos = s3
        s4 = peg$c45()
      }
      s3 = s4
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos
        s5 = peg$parseExpandOption()
        if (s5 !== peg$FAILED) {
          s6 = []
          s7 = peg$currPos
          s8 = peg$parseo()
          if (s8 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c46
              peg$currPos++
            } else {
              s9 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c47)
              }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parseo()
              if (s10 !== peg$FAILED) {
                s11 = peg$parseExpandOption()
                if (s11 !== peg$FAILED) {
                  s8 = [s8, s9, s10, s11]
                  s7 = s8
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
            } else {
              peg$currPos = s7
              s7 = peg$FAILED
            }
          } else {
            peg$currPos = s7
            s7 = peg$FAILED
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7)
            s7 = peg$currPos
            s8 = peg$parseo()
            if (s8 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s9 = peg$c46
                peg$currPos++
              } else {
                s9 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c47)
                }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parseo()
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseExpandOption()
                  if (s11 !== peg$FAILED) {
                    s8 = [s8, s9, s10, s11]
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
            } else {
              peg$currPos = s7
              s7 = peg$FAILED
            }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4
            s5 = peg$c48(s5)
            s4 = s5
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos
          s6 = peg$parseCLOSE()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c49()
          }
          s5 = s6
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5]
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = null
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos
        s4 = peg$parseCOMMA()
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpand()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        if (s3 === peg$FAILED) {
          s3 = null
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsetop() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parseinteger()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c50(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseskip() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parseinteger()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c51(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsesearch() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parsesearch_clause()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c52(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsesearch_clause() {
    var s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$parseNOT()
    if (s2 === peg$FAILED) {
      s2 = null
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1
      s2 = peg$c53(s2)
    }
    s1 = s2
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parseOPEN()
      if (s3 !== peg$FAILED) {
        s4 = peg$parsesearch_clause()
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCLOSE()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c54(s1, s4)
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parsestring()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c55(s1, s3)
        }
        s2 = s3
        if (s2 === peg$FAILED) {
          s2 = peg$currPos
          s3 = peg$parseword()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c55(s1, s3)
          }
          s2 = s3
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = []
        s4 = peg$currPos
        s5 = peg$parseAND()
        if (s5 === peg$FAILED) {
          s5 = peg$parseOR()
          if (s5 === peg$FAILED) {
            s5 = peg$parseAND_SPACE()
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsesearch_clause()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4
            s5 = peg$c56(s1, s5, s6)
            s4 = s5
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4)
          s4 = peg$currPos
          s5 = peg$parseAND()
          if (s5 === peg$FAILED) {
            s5 = peg$parseOR()
            if (s5 === peg$FAILED) {
              s5 = peg$parseAND_SPACE()
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesearch_clause()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c56(s1, s5, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c57(s1)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsefilter() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parsewhere_clause()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c58(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsewhere_clause() {
    var s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$parseNOT()
    if (s2 === peg$FAILED) {
      s2 = null
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1
      s2 = peg$c53(s2)
    }
    s1 = s2
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parseOPEN()
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewhere_clause()
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCLOSE()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c54(s1, s4)
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parsecomparison()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c59(s1, s3)
        }
        s2 = s3
        if (s2 === peg$FAILED) {
          s2 = peg$currPos
          s3 = peg$parselambda()
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c60(s1, s3)
          }
          s2 = s3
          if (s2 === peg$FAILED) {
            s2 = peg$currPos
            s3 = peg$parseboolish()
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2
              s3 = peg$c61(s1, s3)
            }
            s2 = s3
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = []
        s4 = peg$currPos
        s5 = peg$parseAND()
        if (s5 === peg$FAILED) {
          s5 = peg$parseOR()
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhere_clause()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4
            s5 = peg$c56(s1, s5, s6)
            s4 = s5
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4)
          s4 = peg$currPos
          s5 = peg$parseAND()
          if (s5 === peg$FAILED) {
            s5 = peg$parseOR()
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhere_clause()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c56(s1, s5, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c57(s1)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parselambda() {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$parseidentifier()
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c0
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c1)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = []
        s5 = peg$currPos
        s6 = peg$parseidentifier()
        if (s6 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s7 = peg$c0
            peg$currPos++
          } else {
            s7 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c1)
            }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c62(s1, s6)
            s5 = s6
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        } else {
          peg$currPos = s5
          s5 = peg$FAILED
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          s5 = peg$currPos
          s6 = peg$parseidentifier()
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s7 = peg$c0
              peg$currPos++
            } else {
              s7 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c1)
              }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c62(s1, s6)
              s5 = s6
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos
          s6 = peg$parseany()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s5
            s6 = peg$c63(s1, s4, s6)
          }
          s5 = s6
          if (s5 === peg$FAILED) {
            s5 = peg$currPos
            s6 = peg$parseall()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c64(s1, s4, s6)
            }
            s5 = s6
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5]
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c65(s1, s2)
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseinner_lambda() {
    var s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$parseNOT()
    if (s2 === peg$FAILED) {
      s2 = null
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1
      s2 = peg$c66(s2)
    }
    s1 = s2
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parseOPEN()
      if (s3 !== peg$FAILED) {
        s4 = peg$parseinner_lambda()
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCLOSE()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c67(s1, s4)
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos
        s3 = peg$parsecomparison()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c68(s1, s3)
        }
        s2 = s3
      }
      if (s2 !== peg$FAILED) {
        s3 = []
        s4 = peg$currPos
        s5 = peg$parseAND()
        if (s5 === peg$FAILED) {
          s5 = peg$parseOR()
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseinner_lambda()
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4
            s5 = peg$c69(s1, s5, s6)
            s4 = s5
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4)
          s4 = peg$currPos
          s5 = peg$parseAND()
          if (s5 === peg$FAILED) {
            s5 = peg$parseOR()
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseinner_lambda()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c69(s1, s5, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c70(s1)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parselambda_clause() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseidentifier()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c71
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c72)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinner_lambda()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c73(s1, s3)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseany() {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    if (input.substr(peg$currPos, 3) === peg$c74) {
      s1 = peg$c74
      peg$currPos += 3
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c75)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parselambda_clause()
        if (s3 === peg$FAILED) {
          s3 = null
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c70(s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseall() {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    if (input.substr(peg$currPos, 3) === peg$c76) {
      s1 = peg$c76
      peg$currPos += 3
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c77)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parselambda_clause()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCLOSE()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c70(s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseorderby() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parsefunction()
    if (s1 === peg$FAILED) {
      s1 = peg$parseref()
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = peg$parse_()
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos
        if (input.substr(peg$currPos, 3) === peg$c78) {
          s5 = peg$c78
          peg$currPos += 3
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c79)
          }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c80) {
            s5 = peg$c80
            peg$currPos += 4
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c81)
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos)
        } else {
          s4 = s5
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2
          s3 = peg$c82(s1, s4)
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
      if (s2 === peg$FAILED) {
        s2 = null
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c83(s1, s2)
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecount() {
    var s0, s1

    s0 = peg$currPos
    if (input.substr(peg$currPos, 4) === peg$c84) {
      s1 = peg$c84
      peg$currPos += 4
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c85)
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c86) {
        s1 = peg$c86
        peg$currPos += 5
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c87)
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c88(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseapply() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseapplyTrafo()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c0
        peg$currPos++
      } else {
        s4 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c1)
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseapplyTrafo()
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5]
          s3 = s4
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      } else {
        peg$currPos = s3
        s3 = peg$FAILED
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c0
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c1)
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseapplyTrafo()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecustom() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    if (peg$c89.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c90)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      if (peg$c91.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c92)
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c91.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c92)
          }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c18
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c19)
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = []
          if (peg$c93.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c94)
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            if (peg$c93.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c94)
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecomparison() {
    var s0, s1, s2, s3, s4, s5

    peg$silentFails++
    s0 = peg$currPos
    s1 = peg$parseoperand()
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_()
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos
        if (input.substr(peg$currPos, 2) === peg$c96) {
          s4 = peg$c96
          peg$currPos += 2
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c97)
          }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c98) {
            s4 = peg$c98
            peg$currPos += 2
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c99)
            }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c100) {
              s4 = peg$c100
              peg$currPos += 2
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c101)
              }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c102) {
                s4 = peg$c102
                peg$currPos += 2
              } else {
                s4 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c103)
                }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c104) {
                  s4 = peg$c104
                  peg$currPos += 2
                } else {
                  s4 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c105)
                  }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c106) {
                    s4 = peg$c106
                    peg$currPos += 2
                  } else {
                    s4 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c107)
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos)
        } else {
          s3 = s4
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoperand()
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c108(s1, s3, s5)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c95)
      }
    }

    return s0
  }

  function peg$parsemathCalc() {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$parseoperand()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$currPos
      s4 = peg$parse_()
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c109) {
          s5 = peg$c109
          peg$currPos += 3
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c110)
          }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c111) {
            s5 = peg$c111
            peg$currPos += 3
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c112)
            }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c113) {
              s5 = peg$c113
              peg$currPos += 3
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c114)
              }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c115) {
                s5 = peg$c115
                peg$currPos += 3
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c116)
                }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c117) {
                  s5 = peg$c117
                  peg$currPos += 3
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c118)
                  }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseoperand()
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      } else {
        peg$currPos = s3
        s3 = peg$FAILED
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$currPos
        s4 = peg$parse_()
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c109) {
            s5 = peg$c109
            peg$currPos += 3
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c110)
            }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c111) {
              s5 = peg$c111
              peg$currPos += 3
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c112)
              }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c113) {
                s5 = peg$c113
                peg$currPos += 3
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c114)
                }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c115) {
                  s5 = peg$c115
                  peg$currPos += 3
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c116)
                  }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c117) {
                    s5 = peg$c117
                    peg$currPos += 3
                  } else {
                    s5 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c118)
                    }
                  }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseoperand()
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7]
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseoperand() {
    var s0, s1

    peg$silentFails++
    s0 = peg$parsefunction()
    if (s0 === peg$FAILED) {
      s0 = peg$parseref()
      if (s0 === peg$FAILED) {
        s0 = peg$parseval()
      }
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c119)
      }
    }

    return s0
  }

  function peg$parseref() {
    var s0, s1, s2, s3, s4, s5

    peg$silentFails++
    s0 = peg$currPos
    s1 = peg$parseidentifier()
    if (s1 !== peg$FAILED) {
      s2 = []
      s3 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c0
        peg$currPos++
      } else {
        s4 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c1)
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseidentifier()
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3
          s4 = peg$c121(s1, s5)
          s3 = s4
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      } else {
        peg$currPos = s3
        s3 = peg$FAILED
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c0
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c1)
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier()
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3
            s4 = peg$c121(s1, s5)
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c122(s1, s2)
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c120)
      }
    }

    return s0
  }

  function peg$parseval() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parsedate()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c123(s1)
    }
    s0 = s1
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parsenumber()
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c124(s1)
      }
      s0 = s1
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = peg$parsestring()
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c123(s1)
        }
        s0 = s1
      }
    }

    return s0
  }

  function peg$parsefunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7

    peg$silentFails++
    s0 = peg$currPos
    s1 = peg$currPos
    s2 = []
    if (peg$c126.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c127)
      }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c126.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c127)
          }
        }
      }
    } else {
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperand()
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          s6 = peg$parseCOMMA()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseoperand()
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5
              s6 = peg$c128(s1, s3, s7)
              s5 = s6
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            s5 = peg$currPos
            s6 = peg$parseCOMMA()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseoperand()
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5
                s6 = peg$c128(s1, s3, s7)
                s5 = s6
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE()
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c129(s1, s3, s4)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c125)
      }
    }

    return s0
  }

  function peg$parseboolish() {
    var s0, s1, s2, s3, s4, s5, s6

    peg$silentFails++
    s0 = peg$currPos
    if (input.substr(peg$currPos, 8) === peg$c131) {
      s1 = peg$c131
      peg$currPos += 8
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c132)
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c133) {
        s1 = peg$c133
        peg$currPos += 8
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c134)
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c135) {
          s1 = peg$c135
          peg$currPos += 10
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c136)
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperand()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCOMMA()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoperand()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c137(s1, s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c130)
      }
    }

    return s0
  }

  function peg$parseNOT() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c138) {
        s2 = input.substr(peg$currPos, 3)
        peg$currPos += 3
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c139)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c140()
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseAND() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c141) {
        s2 = input.substr(peg$currPos, 3)
        peg$currPos += 3
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c142)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c143()
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseAND_SPACE() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c143()
    }
    s0 = s1

    return s0
  }

  function peg$parseOR() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c144) {
        s2 = input.substr(peg$currPos, 2)
        peg$currPos += 2
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c145)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c146()
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseapplyTrafo() {
    var s0, s1, s2

    s0 = peg$currPos
    if (input.substr(peg$currPos, 9) === peg$c147) {
      s1 = peg$c147
      peg$currPos += 9
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c148)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseaggregateTrafo()
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      if (input.substr(peg$currPos, 7) === peg$c149) {
        s1 = peg$c149
        peg$currPos += 7
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c150)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsegroupbyTrafo()
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        if (input.substr(peg$currPos, 6) === peg$c151) {
          s1 = peg$c151
          peg$currPos += 6
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c152)
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefilterTrafo()
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2]
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsecountTrafo()
          if (s0 === peg$FAILED) {
            s0 = peg$currPos
            if (input.substr(peg$currPos, 6) === peg$c153) {
              s1 = peg$c153
              peg$currPos += 6
            } else {
              s1 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c154)
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexpandTrafo()
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos
              if (input.substr(peg$currPos, 6) === peg$c155) {
                s1 = peg$c155
                peg$currPos += 6
              } else {
                s1 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c156)
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsesearchTrafo()
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2]
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos
                if (input.substr(peg$currPos, 6) === peg$c157) {
                  s1 = peg$c157
                  peg$currPos += 6
                } else {
                  s1 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c158)
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseconcatTrafo()
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2]
                    s0 = s1
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos
                  if (input.substr(peg$currPos, 7) === peg$c159) {
                    s1 = peg$c159
                    peg$currPos += 7
                  } else {
                    s1 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c160)
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsecomputeTrafo()
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2]
                      s0 = s1
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos
                    if (input.substr(peg$currPos, 13) === peg$c161) {
                      s1 = peg$c161
                      peg$currPos += 13
                    } else {
                      s1 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c162)
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsecommonFuncTrafo()
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2]
                        s0 = s1
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos
                      if (input.substr(peg$currPos, 9) === peg$c163) {
                        s1 = peg$c163
                        peg$currPos += 9
                      } else {
                        s1 = peg$FAILED
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c164)
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsecommonFuncTrafo()
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2]
                          s0 = s1
                        } else {
                          peg$currPos = s0
                          s0 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos
                        if (input.substr(peg$currPos, 10) === peg$c165) {
                          s1 = peg$c165
                          peg$currPos += 10
                        } else {
                          s1 = peg$FAILED
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c166)
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsecommonFuncTrafo()
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2]
                            s0 = s1
                          } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                          }
                        } else {
                          peg$currPos = s0
                          s0 = peg$FAILED
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos
                          if (input.substr(peg$currPos, 6) === peg$c167) {
                            s1 = peg$c167
                            peg$currPos += 6
                          } else {
                            s1 = peg$FAILED
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c168)
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsecommonFuncTrafo()
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2]
                              s0 = s1
                            } else {
                              peg$currPos = s0
                              s0 = peg$FAILED
                            }
                          } else {
                            peg$currPos = s0
                            s0 = peg$FAILED
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseidentityTrafo()
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0
  }

  function peg$parseaggregateTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseaggregateItem()
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          s6 = peg$parseo()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseCOMMA()
            if (s7 !== peg$FAILED) {
              s8 = peg$parseo()
              if (s8 !== peg$FAILED) {
                s9 = peg$parseaggregateItem()
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            s5 = peg$currPos
            s6 = peg$parseo()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCOMMA()
              if (s7 !== peg$FAILED) {
                s8 = peg$parseo()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseaggregateItem()
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9]
                    s5 = s6
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseo()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE()
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseaggregateItem() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$currPos
    if (input.substr(peg$currPos, 6) === peg$c8) {
      s2 = peg$c8
      peg$currPos += 6
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c9)
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseasAlias()
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1
        s2 = peg$c169(s3)
        s1 = s2
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
    } else {
      peg$currPos = s1
      s1 = peg$FAILED
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseaggregateExpr()
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c170(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseaggregateExpr() {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = peg$parseref()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseaggregateWith()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseaggregateFrom()
        if (s3 === peg$FAILED) {
          s3 = null
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseasAlias()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c171(s1, s2, s4)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      s1 = peg$parseidentifier()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN()
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaggregateExpr()
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE()
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    }

    return s0
  }

  function peg$parseaggregateWith() {
    var s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c172) {
        s2 = peg$c172
        peg$currPos += 4
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c173)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos
          s5 = []
          if (peg$c126.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c127)
            }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              if (peg$c126.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c127)
                }
              }
            }
          } else {
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            s4 = input.substring(s4, peg$currPos)
          } else {
            s4 = s5
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c174(s4)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseaggregateFrom() {
    var s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c175) {
        s2 = peg$c175
        peg$currPos += 4
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c176)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseref()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseaggregateWith()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseaggregateFrom()
              if (s6 === peg$FAILED) {
                s6 = null
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseasAlias() {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c177) {
        s2 = peg$c177
        peg$currPos += 2
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c178)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseidentifier()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c179(s4)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsegroupbyTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos
        s4 = peg$parseOPEN()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsegroupByElem()
          if (s5 !== peg$FAILED) {
            s6 = []
            s7 = peg$currPos
            s8 = peg$parseCOMMA()
            if (s8 !== peg$FAILED) {
              s9 = peg$parseo()
              if (s9 !== peg$FAILED) {
                s10 = peg$parsegroupByElem()
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10]
                  s7 = s8
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
            } else {
              peg$currPos = s7
              s7 = peg$FAILED
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7)
              s7 = peg$currPos
              s8 = peg$parseCOMMA()
              if (s8 !== peg$FAILED) {
                s9 = peg$parseo()
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsegroupByElem()
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10]
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
              } else {
                peg$currPos = s7
                s7 = peg$FAILED
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCLOSE()
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7]
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos
          s5 = peg$parseCOMMA()
          if (s5 !== peg$FAILED) {
            s6 = peg$parseo()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseapply()
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7]
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          if (s4 === peg$FAILED) {
            s4 = null
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseo()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE()
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsegroupByElem() {
    var s0, s1

    s0 = peg$currPos
    s1 = peg$parserollupSpec()
    if (s1 === peg$FAILED) {
      s1 = peg$parseref()
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c180(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parserollupSpec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    if (input.substr(peg$currPos, 6) === peg$c181) {
      s1 = peg$c181
      peg$currPos += 6
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c182)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c183) {
            s4 = peg$c183
            peg$currPos += 4
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c184)
            }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseref()
          }
          if (s4 !== peg$FAILED) {
            s5 = []
            s6 = peg$currPos
            s7 = peg$parseo()
            if (s7 !== peg$FAILED) {
              s8 = peg$parseCOMMA()
              if (s8 !== peg$FAILED) {
                s9 = peg$parseref()
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9]
                  s6 = s7
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                s6 = peg$currPos
                s7 = peg$parseo()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCOMMA()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseref()
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9]
                      s6 = s7
                    } else {
                      peg$currPos = s6
                      s6 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s6
                    s6 = peg$FAILED
                  }
                } else {
                  peg$currPos = s6
                  s6 = peg$FAILED
                }
              }
            } else {
              s5 = peg$FAILED
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseo()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCLOSE()
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7]
                  s0 = s1
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsefilterTrafo() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefilter()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseo()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE()
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecountTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10

    s0 = peg$currPos
    if (input.substr(peg$currPos, 8) === peg$c185) {
      s1 = peg$c185
      peg$currPos += 8
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c186)
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c187) {
        s1 = peg$c187
        peg$currPos += 11
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c188)
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOPEN()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumber()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseo()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCOMMA()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseo()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseref()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseo()
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseCLOSE()
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0
                        s1 = peg$c189(s1, s4, s8)
                        s0 = s1
                      } else {
                        peg$currPos = s0
                        s0 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseexpandTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseref()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseo()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseo()
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos
                s8 = peg$parseexpandTrafo()
                if (s8 !== peg$FAILED) {
                  s9 = []
                  s10 = peg$currPos
                  s11 = peg$parseo()
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseCOMMA()
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseexpandTrafo()
                      if (s13 !== peg$FAILED) {
                        s11 = [s11, s12, s13]
                        s10 = s11
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s10
                      s10 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s10
                    s10 = peg$FAILED
                  }
                  while (s10 !== peg$FAILED) {
                    s9.push(s10)
                    s10 = peg$currPos
                    s11 = peg$parseo()
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseCOMMA()
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseexpandTrafo()
                        if (s13 !== peg$FAILED) {
                          s11 = [s11, s12, s13]
                          s10 = s11
                        } else {
                          peg$currPos = s10
                          s10 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s10
                      s10 = peg$FAILED
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9]
                    s7 = s8
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                } else {
                  peg$currPos = s7
                  s7 = peg$FAILED
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos
                  s8 = peg$parsefilterTrafo()
                  if (s8 !== peg$FAILED) {
                    s9 = []
                    s10 = peg$currPos
                    s11 = peg$parseo()
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseCOMMA()
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseexpandTrafo()
                        if (s13 !== peg$FAILED) {
                          s11 = [s11, s12, s13]
                          s10 = s11
                        } else {
                          peg$currPos = s10
                          s10 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    } else {
                      peg$currPos = s10
                      s10 = peg$FAILED
                    }
                    while (s10 !== peg$FAILED) {
                      s9.push(s10)
                      s10 = peg$currPos
                      s11 = peg$parseo()
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseCOMMA()
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parseexpandTrafo()
                          if (s13 !== peg$FAILED) {
                            s11 = [s11, s12, s13]
                            s10 = s11
                          } else {
                            peg$currPos = s10
                            s10 = peg$FAILED
                          }
                        } else {
                          peg$currPos = s10
                          s10 = peg$FAILED
                        }
                      } else {
                        peg$currPos = s10
                        s10 = peg$FAILED
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9]
                      s7 = s8
                    } else {
                      peg$currPos = s7
                      s7 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s7
                    s7 = peg$FAILED
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseo()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE()
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9]
                      s0 = s1
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsesearchTrafo() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesearch()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseo()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCLOSE()
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5]
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseconcatTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseapply()
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          s6 = peg$parseo()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseCOMMA()
            if (s7 !== peg$FAILED) {
              s8 = peg$parseo()
              if (s8 !== peg$FAILED) {
                s9 = peg$parseapply()
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5)
              s5 = peg$currPos
              s6 = peg$parseo()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCOMMA()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseo()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseapply()
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9]
                      s5 = s6
                    } else {
                      peg$currPos = s5
                      s5 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            }
          } else {
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseo()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE()
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecomputeTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomputeExpr()
        if (s3 !== peg$FAILED) {
          s4 = []
          s5 = peg$currPos
          s6 = peg$parseo()
          if (s6 !== peg$FAILED) {
            s7 = peg$parseCOMMA()
            if (s7 !== peg$FAILED) {
              s8 = peg$parseo()
              if (s8 !== peg$FAILED) {
                s9 = peg$parsecomputeExpr()
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9]
                  s5 = s6
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            s5 = peg$currPos
            s6 = peg$parseo()
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCOMMA()
              if (s7 !== peg$FAILED) {
                s8 = peg$parseo()
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsecomputeExpr()
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9]
                    s5 = s6
                  } else {
                    peg$currPos = s5
                    s5 = peg$FAILED
                  }
                } else {
                  peg$currPos = s5
                  s5 = peg$FAILED
                }
              } else {
                peg$currPos = s5
                s5 = peg$FAILED
              }
            } else {
              peg$currPos = s5
              s5 = peg$FAILED
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseo()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCLOSE()
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6]
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecomputeExpr() {
    var s0, s1, s2

    s0 = peg$currPos
    s1 = peg$parsewhere_clause()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseasAlias()
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsecommonFuncTrafo() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    s1 = peg$parseOPEN()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseo()
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperand()
        if (s3 !== peg$FAILED) {
          s4 = peg$parseo()
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA()
            if (s5 !== peg$FAILED) {
              s6 = peg$parseo()
              if (s6 !== peg$FAILED) {
                s7 = peg$parseoperand()
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseo()
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCLOSE()
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9]
                      s0 = s1
                    } else {
                      peg$currPos = s0
                      s0 = peg$FAILED
                    }
                  } else {
                    peg$currPos = s0
                    s0 = peg$FAILED
                  }
                } else {
                  peg$currPos = s0
                  s0 = peg$FAILED
                }
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseidentityTrafo() {
    var s0

    if (input.substr(peg$currPos, 8) === peg$c190) {
      s0 = peg$c190
      peg$currPos += 8
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c191)
      }
    }

    return s0
  }

  function peg$parsestring() {
    var s0, s1, s2, s3, s4

    peg$silentFails++
    s0 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c193
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c194)
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = []
      if (input.substr(peg$currPos, 2) === peg$c195) {
        s4 = peg$c195
        peg$currPos += 2
      } else {
        s4 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c196)
        }
      }
      if (s4 === peg$FAILED) {
        if (peg$c197.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c198)
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4)
        if (input.substr(peg$currPos, 2) === peg$c195) {
          s4 = peg$c195
          peg$currPos += 2
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c196)
          }
        }
        if (s4 === peg$FAILED) {
          if (peg$c197.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c198)
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos)
      } else {
        s2 = s3
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c193
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c194)
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c199(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c192)
      }
    }

    return s0
  }

  function peg$parseword() {
    var s0, s1, s2

    s0 = peg$currPos
    s1 = []
    if (peg$c200.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c201)
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2)
        if (peg$c200.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c201)
          }
        }
      }
    } else {
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos)
    } else {
      s0 = s1
    }

    return s0
  }

  function peg$parsedate() {
    var s0, s1, s2, s3, s4, s5, s6, s7

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = []
    if (peg$c202.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c203)
      }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c202.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c203)
          }
        }
      }
    } else {
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s3 = peg$c204
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c205)
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = []
        if (peg$c202.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c203)
          }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            if (peg$c202.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c203)
              }
            }
          }
        } else {
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c204
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c205)
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = []
            if (peg$c202.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s7 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c203)
              }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7)
                if (peg$c202.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s7 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c203)
                  }
                }
              }
            } else {
              s6 = peg$FAILED
            }
            if (s6 !== peg$FAILED) {
              if (peg$c206.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s7 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c207)
                }
              }
              if (s7 === peg$FAILED) {
                s7 = null
              }
              if (s7 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6, s7]
                s1 = s2
              } else {
                peg$currPos = s1
                s1 = peg$FAILED
              }
            } else {
              peg$currPos = s1
              s1 = peg$FAILED
            }
          } else {
            peg$currPos = s1
            s1 = peg$FAILED
          }
        } else {
          peg$currPos = s1
          s1 = peg$FAILED
        }
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
    } else {
      peg$currPos = s1
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos)
    } else {
      s0 = s1
    }

    return s0
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    if (peg$c208.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c209)
      }
    }
    if (s3 === peg$FAILED) {
      s3 = null
    }
    if (s3 !== peg$FAILED) {
      s4 = []
      if (peg$c202.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s5 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c203)
        }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          if (peg$c202.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c203)
            }
          }
        }
      } else {
        s4 = peg$FAILED
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c210
          peg$currPos++
        } else {
          s6 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c211)
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = []
          if (peg$c202.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s8 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c203)
            }
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8)
              if (peg$c202.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c203)
                }
              }
            }
          } else {
            s7 = peg$FAILED
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7]
            s5 = s6
          } else {
            peg$currPos = s5
            s5 = peg$FAILED
          }
        } else {
          peg$currPos = s5
          s5 = peg$FAILED
        }
        if (s5 === peg$FAILED) {
          s5 = null
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos
          if (input.charCodeAt(peg$currPos) === 101) {
            s7 = peg$c212
            peg$currPos++
          } else {
            s7 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c213)
            }
          }
          if (s7 !== peg$FAILED) {
            s8 = []
            if (peg$c202.test(input.charAt(peg$currPos))) {
              s9 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s9 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c203)
              }
            }
            if (s9 !== peg$FAILED) {
              while (s9 !== peg$FAILED) {
                s8.push(s9)
                if (peg$c202.test(input.charAt(peg$currPos))) {
                  s9 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s9 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c203)
                  }
                }
              }
            } else {
              s8 = peg$FAILED
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8]
              s6 = s7
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
          } else {
            peg$currPos = s6
            s6 = peg$FAILED
          }
          if (s6 === peg$FAILED) {
            s6 = null
          }
          if (s6 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6]
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c214(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    if (peg$c208.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c209)
      }
    }
    if (s3 === peg$FAILED) {
      s3 = null
    }
    if (s3 !== peg$FAILED) {
      s4 = []
      if (peg$c202.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s5 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c203)
        }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          if (peg$c202.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s5 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c203)
            }
          }
        }
      } else {
        s4 = peg$FAILED
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4]
        s2 = s3
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c215(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3, s4

    s0 = peg$currPos
    s1 = peg$currPos
    if (peg$c89.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c90)
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = []
      if (peg$c216.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s4 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c217)
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4)
        if (peg$c216.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c217)
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3]
        s1 = s2
      } else {
        peg$currPos = s1
        s1 = peg$FAILED
      }
    } else {
      peg$currPos = s1
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos)
    } else {
      s0 = s1
    }

    return s0
  }

  function peg$parseguid() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    s3 = []
    if (peg$c218.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s4 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c219)
      }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4)
        if (peg$c218.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c219)
          }
        }
      }
    } else {
      s3 = peg$FAILED
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s4 = peg$c204
        peg$currPos++
      } else {
        s4 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c205)
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = []
        s6 = peg$currPos
        s7 = []
        if (peg$c218.test(input.charAt(peg$currPos))) {
          s8 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s8 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c219)
          }
        }
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8)
            if (peg$c218.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s8 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c219)
              }
            }
          }
        } else {
          s7 = peg$FAILED
        }
        if (s7 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s8 = peg$c204
            peg$currPos++
          } else {
            s8 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c205)
            }
          }
          if (s8 === peg$FAILED) {
            s8 = null
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8]
            s6 = s7
          } else {
            peg$currPos = s6
            s6 = peg$FAILED
          }
        } else {
          peg$currPos = s6
          s6 = peg$FAILED
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6)
            s6 = peg$currPos
            s7 = []
            if (peg$c218.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s8 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c219)
              }
            }
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8)
                if (peg$c218.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s8 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c219)
                  }
                }
              }
            } else {
              s7 = peg$FAILED
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s8 = peg$c204
                peg$currPos++
              } else {
                s8 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c205)
                }
              }
              if (s8 === peg$FAILED) {
                s8 = null
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8]
                s6 = s7
              } else {
                peg$currPos = s6
                s6 = peg$FAILED
              }
            } else {
              peg$currPos = s6
              s6 = peg$FAILED
            }
          }
        } else {
          s5 = peg$FAILED
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5]
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c220(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parseCOLON() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c71
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c72)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseCOMMA() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c221
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c222)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseSEMI() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c46
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c47)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseOPEN() {
    var s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c223
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c224)
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseo()
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseCLOSE() {
    var s0, s1, s2

    s0 = peg$currPos
    s1 = peg$parseo()
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 41) {
        s2 = peg$c225
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c226)
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseo() {
    var s0, s1, s2

    peg$silentFails++
    s0 = peg$currPos
    s1 = []
    if (peg$c228.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c229)
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2)
      if (peg$c228.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c229)
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos)
    } else {
      s0 = s1
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c227)
      }
    }

    return s0
  }

  function peg$parse_() {
    var s0, s1, s2

    peg$silentFails++
    s0 = peg$currPos
    s1 = []
    if (peg$c228.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c229)
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2)
        if (peg$c228.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c229)
          }
        }
      }
    } else {
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos)
    } else {
      s0 = s1
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) {
        peg$fail(peg$c230)
      }
    }

    return s0
  }

  const $ = Object.assign
  const { strict } = options
  const stack = []
  let SELECT

  // we keep that here to allow for usage in https://pegjs.org/online
  const safeNumber =
    options.safeNumber ||
    function (str) {
      const n = Number(str)
      return Number.isSafeInteger(n) ? n : str
    }

  // check whether we have any
  // - $select
  // - aggregate(... as someProp)
  const hasNOTAny$select = columns => {
    return columns.filter(cur => (cur.ref ? !cur.expand : cur.as)).length === 0
  }

  const fillSkippedColumns = SELECT => {
    // when $select and $expand was NOT defined
    if (!SELECT.columns) {
      return { ...SELECT, columns: [{ ref: '*' }] }
    } else if (hasNOTAny$select(SELECT.columns)) {
      // in case when have $expand but have NOT $select
      return { ...SELECT, columns: [{ ref: '*' }, ...SELECT.columns] }
    }
    return SELECT
  }

  // NOTe: mutation of the object property, it's NOT a pure function
  const correctAggAwayWhere = (where, colNames) => {
    const changedWhere = [...where]

    for (const item of changedWhere) {
      if (item.xpr) {
        item.xpr = correctAggAwayWhere(item.xpr, colNames)
      }
      if (item.args) {
        item.args = correctAggAwayWhere(item.args, colNames)
      }

      // $filter ohne $apply -> input set = entity -> kein null setzen
      // $apply mit filter transformation -> wie oben
      // $apply mit filter transformation + $filter -> filter in where, $filter in having
      // $apply mit filter transformation + groupby/aggregate/select + $filter -> filter in where, $filter in having

      // TODO fix this for $apply
      if (item.ref && !colNames.includes(item.ref.join(''))) {
        // item.ref = null;
      }
      // REVISIT: { val:null } for should be also implemented
    }

    return changedWhere
  }

  const correctAggAwayColumns = SELECT => {
    const groupBy = SELECT.groupBy
    const where = SELECT.where
    const columns = SELECT.columns || []
    const aggregates = columns.filter(cur => cur.as)

    let fromAggregate = []
    let fromGroupBy = []

    // handle $apply=aggregate(... as someProp)&$select=someProp,?...
    if (aggregates.length !== 0) {
      fromAggregate = columns.filter(cur => (cur.ref ? aggregates.includes(cur.ref.join('')) : true))
    }
    // handle $apply=groupby((someProp,?...))&$select=?...
    if (groupBy) {
      const allowedNames = groupBy.map(({ ref }) => ref.join(''))
      const allowedColumns = columns.filter(cur => cur.ref && allowedNames.includes(cur.ref.join('')))
      fromGroupBy = allowedColumns.length === 0 ? [...groupBy] : allowedColumns
    }

    const newColumns =
      fromAggregate.length !== 0 || fromGroupBy.length !== 0 ? [...fromGroupBy, ...fromAggregate] : SELECT.columns

    let result = { ...SELECT, columns: newColumns }
    let newWhere = []
    if (where && (groupBy || aggregates.length !== 0)) {
      // changing { ref: null } for aggregated-away props
      const colNames = columns.map(cur => (cur.ref && cur.ref.join('')) || cur.as)
      result = { ...result, where: correctAggAwayWhere(where, colNames) }
    }

    return result
  }

  peg$result = peg$startRuleFunction()

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation())
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    )
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
}
