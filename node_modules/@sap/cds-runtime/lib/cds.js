const cds = global.cds || require('@sap/cds/lib')
module.exports = cds

/*
 * csn aspects
 */
const { any, entity } = cds.builtin.classes
cds.extend(any).with(require('./common/aspects/any'))
cds.extend(entity).with(require('./common/aspects/entity'))

/*
 * mtx?
 */
Object.defineProperty(cds, '_mtxEnabled', {
  get: () => cds.mtx && typeof cds.mtx.in === 'function',
  configurable: true
})

/*
 * (lazy) feature flags
 */
// referential integrity
Object.defineProperty(cds.env.features, '_foreign_key_constraints', {
  get: () => cds.env.cdsc.beta && cds.env.cdsc.beta.foreignKeyConstraints,
  configurable: true
})
let assertIntegrity = cds.env.features.assert_integrity
Object.defineProperty(cds.env.features, 'assert_integrity', {
  get: () => (assertIntegrity != null ? assertIntegrity : !cds.env.features._foreign_key_constraints),
  set: val => {
    assertIntegrity = val
  },
  configurable: true
})

// REVISIT: move to core for GA
/*
 * additions for feature toggles
 */
cds.once('bootstrap', app => {
  app.use((req, res, next) => {
    if (!cds.env.features.alpha_toggles) return next()

    // inject features from dwc header
    const fth = req.headers['dwc-product-configuration']
    if (fth) {
      const { features } = JSON.parse(Buffer.from(fth, 'base64').toString('utf-8'))
      req.features = features
        .sort((a, b) => a.name.localeCompare(b.name))
        .reduce((acc, cur) => {
          if (cur.enabled) acc[cur.name] = 1
          return acc
        }, {})
    }

    // extend @sap/cds's dispatch listener
    const {
      eventEmitter: mtx,
      events: { TENANT_UPDATED }
    } = cds.mtx
    req.on('dispatch', req => {
      // clear ext map for next request as soon as it was dispatched
      mtx.emit(TENANT_UPDATED, cds.mtx._getHash(req._.req))
      // set cds.context.features here so we don't need to touch @sap/cds
      cds.context.features = req._.req.features
    })

    next()
  })
})
cds.once('served', () => {
  // attach _getHash helper to mtx
  if (cds._mtxEnabled) {
    cds.mtx._getHash = req => {
      let hash = req.user.tenant
      if (req.features) hash += ':' + Object.keys(req.features).join(';')
      return hash
    }
  }
})
